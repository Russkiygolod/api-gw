// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/interfaces_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	books "api-gw/internal/books"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServiceBooksClient is a mock of ServiceBooksClient interface.
type MockServiceBooksClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBooksClientMockRecorder
}

// MockServiceBooksClientMockRecorder is the mock recorder for MockServiceBooksClient.
type MockServiceBooksClientMockRecorder struct {
	mock *MockServiceBooksClient
}

// NewMockServiceBooksClient creates a new mock instance.
func NewMockServiceBooksClient(ctrl *gomock.Controller) *MockServiceBooksClient {
	mock := &MockServiceBooksClient{ctrl: ctrl}
	mock.recorder = &MockServiceBooksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBooksClient) EXPECT() *MockServiceBooksClientMockRecorder {
	return m.recorder
}

// DelBooks mocks base method.
func (m *MockServiceBooksClient) DelBooks(ctx context.Context, in *books.DelBooksReq, opts ...grpc.CallOption) (*books.DelBooksResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelBooks", varargs...)
	ret0, _ := ret[0].(*books.DelBooksResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelBooks indicates an expected call of DelBooks.
func (mr *MockServiceBooksClientMockRecorder) DelBooks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelBooks", reflect.TypeOf((*MockServiceBooksClient)(nil).DelBooks), varargs...)
}

// GetBooks mocks base method.
func (m *MockServiceBooksClient) GetBooks(ctx context.Context, in *books.GetBooksReq, opts ...grpc.CallOption) (*books.GetBooksResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBooks", varargs...)
	ret0, _ := ret[0].(*books.GetBooksResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockServiceBooksClientMockRecorder) GetBooks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockServiceBooksClient)(nil).GetBooks), varargs...)
}

// PatchBooks mocks base method.
func (m *MockServiceBooksClient) PatchBooks(ctx context.Context, in *books.PatchBooksReq, opts ...grpc.CallOption) (*books.PatchBooksResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchBooks", varargs...)
	ret0, _ := ret[0].(*books.PatchBooksResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBooks indicates an expected call of PatchBooks.
func (mr *MockServiceBooksClientMockRecorder) PatchBooks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBooks", reflect.TypeOf((*MockServiceBooksClient)(nil).PatchBooks), varargs...)
}

// PostBooks mocks base method.
func (m *MockServiceBooksClient) PostBooks(ctx context.Context, in *books.PostBooksReq, opts ...grpc.CallOption) (*books.PostBooksResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostBooks", varargs...)
	ret0, _ := ret[0].(*books.PostBooksResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBooks indicates an expected call of PostBooks.
func (mr *MockServiceBooksClientMockRecorder) PostBooks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBooks", reflect.TypeOf((*MockServiceBooksClient)(nil).PostBooks), varargs...)
}

// PostChekAuth mocks base method.
func (m *MockServiceBooksClient) PostChekAuth(ctx context.Context, in *books.PostChekAuthReq, opts ...grpc.CallOption) (*books.PostChekAuthResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostChekAuth", varargs...)
	ret0, _ := ret[0].(*books.PostChekAuthResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostChekAuth indicates an expected call of PostChekAuth.
func (mr *MockServiceBooksClientMockRecorder) PostChekAuth(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostChekAuth", reflect.TypeOf((*MockServiceBooksClient)(nil).PostChekAuth), varargs...)
}

// PostLogin mocks base method.
func (m *MockServiceBooksClient) PostLogin(ctx context.Context, in *books.PostLoginReq, opts ...grpc.CallOption) (*books.PostLoginResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostLogin", varargs...)
	ret0, _ := ret[0].(*books.PostLoginResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostLogin indicates an expected call of PostLogin.
func (mr *MockServiceBooksClientMockRecorder) PostLogin(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLogin", reflect.TypeOf((*MockServiceBooksClient)(nil).PostLogin), varargs...)
}

// PostRegistration mocks base method.
func (m *MockServiceBooksClient) PostRegistration(ctx context.Context, in *books.PostRegistrationReq, opts ...grpc.CallOption) (*books.PostRegistrationResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostRegistration", varargs...)
	ret0, _ := ret[0].(*books.PostRegistrationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRegistration indicates an expected call of PostRegistration.
func (mr *MockServiceBooksClientMockRecorder) PostRegistration(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRegistration", reflect.TypeOf((*MockServiceBooksClient)(nil).PostRegistration), varargs...)
}
