// Code generated by MockGen. DO NOT EDIT.
// Source: jwtToken.go
//
// Generated by this command:
//
//	mockgen -source=jwtToken.go -destination=mocks/jwt_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	jwt_go "github.com/dgrijalva/jwt-go"
	gomock "go.uber.org/mock/gomock"
)

// MockJwtToken is a mock of JwtToken interface.
type MockJwtToken struct {
	ctrl     *gomock.Controller
	recorder *MockJwtTokenMockRecorder
}

// MockJwtTokenMockRecorder is the mock recorder for MockJwtToken.
type MockJwtTokenMockRecorder struct {
	mock *MockJwtToken
}

// NewMockJwtToken creates a new mock instance.
func NewMockJwtToken(ctrl *gomock.Controller) *MockJwtToken {
	mock := &MockJwtToken{ctrl: ctrl}
	mock.recorder = &MockJwtTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtToken) EXPECT() *MockJwtTokenMockRecorder {
	return m.recorder
}

// AuthMiddleware mocks base method.
func (m *MockJwtToken) AuthMiddleware(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthMiddleware", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthMiddleware indicates an expected call of AuthMiddleware.
func (mr *MockJwtTokenMockRecorder) AuthMiddleware(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMiddleware", reflect.TypeOf((*MockJwtToken)(nil).AuthMiddleware), tokenString)
}

// GetToken mocks base method.
func (m *MockJwtToken) GetToken(Email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", Email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockJwtTokenMockRecorder) GetToken(Email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockJwtToken)(nil).GetToken), Email)
}

// VerifyToken mocks base method.
func (m *MockJwtToken) VerifyToken(tokenString string) (jwt_go.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(jwt_go.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJwtTokenMockRecorder) VerifyToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJwtToken)(nil).VerifyToken), tokenString)
}
